<?xml version='1.0' encoding='utf-8'?>
<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:nf:iot:leg:sc:1.0'
    xmlns='urn:nf:iot:leg:sc:1.0'
    xmlns:e2='urn:nf:iot:e2e:1.0'
    xmlns:id='urn:nf:iot:leg:id:1.0'
    xmlns:xml='http://www.w3.org/XML/1998/namespace'
    elementFormDefault='qualified'>

	<xs:import namespace='urn:nf:iot:e2e:1.0'/>
	<xs:import namespace='urn:nf:iot:leg:id:1.0'/>
	<xs:import namespace='http://www.w3.org/XML/1998/namespace'/>

	<xs:element name='createContract'>
		<xs:annotation>
			<xs:documentation>Sent in an iq set stanza, to create a smart contract in the account of the sender.</xs:documentation>
			<xs:documentation>Expected response element: contract</xs:documentation>
			<xs:documentation>Note: The client is required to have a valid legal identity to create a contract, even if the contract is not signed.</xs:documentation>
			<xs:documentation>Note: Whenever the state of the contract is changed on the server, a message is sent to the bare JIDs of all parties of the contract, including the creator if not signed, containing the updated contract, in a contract element. Contracts should only be accepted by clients, if the sender corresponds to the provider, and if the server signature is valid, and corresponds to the public key of the server.</xs:documentation>
			<xs:documentation>If an XML schema is available on the server defining the structure of the machine-readable contents of the contract, based on its qualified name, it will be used to validate the contents of the contract. If that validation fails, an error is returned, and the contract is not created. If validation succeeds, information about this will be made available in the state portion of the contract.</xs:documentation>
			<xs:documentation>XML Schemas can either be registered with the Trust Provider out-of-band, or downloaded by the Trust Provider automatically, if accessible through the namespace URI, if it's using a downloadable URI scheme. The XML Schema must not contain processing instructions.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:choice minOccurs='1' maxOccurs='1'>
					<xs:element ref='contract'>
						<xs:annotation>
							<xs:documentation>The contract the legal identity of the client wants to create.</xs:documentation>
							<xs:documentation>Note: A contract has to be reviewed and approved by the Trust Provider before the contract can be signed. The review-process is performed out-of-band.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name='template'>
						<xs:annotation>
							<xs:documentation>By referencing a reviewed and approved contract instead of creating an absolutely new one, the legal identity can skip the review and approval steps otherwise required when creating a new contract.</xs:documentation>
							<xs:documentation>Note: The client must be authorized to access the referenced contract, in order to be able to create new contracts based on the referenced one.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:sequence>
								<xs:element ref='parts' minOccurs='0' maxOccurs='1'>
									<xs:annotation>
										<xs:documentation>This element defines the parts of the contract.</xs:documentation>
									</xs:annotation>
								</xs:element>
								<xs:element ref='parameters' minOccurs='0' maxOccurs='1'>
									<xs:annotation>
										<xs:documentation>Parameters can be referenced from the human and machine readable texts, and provide a mechanism to maintain the text consistent.</xs:documentation>
										<xs:documentation>Array must not contain parameters not available in the referenced contract.</xs:documentation>
										<xs:documentation>Prameters available in the referenced contract will be used as-is, if not available in this sequence, or overwritten by the present parameters, if available.</xs:documentation>
									</xs:annotation>
								</xs:element>
							</xs:sequence>
							<xs:attribute name='id' type='xs:string' use='required'>
								<xs:annotation>
									<xs:documentation>The identifier of a contract the legal identity wishes to base the new contract on (i.e. act as template for the new contract).</xs:documentation>
									<xs:documentation>Contract must exist, be well-defined, and be in an Approved, BeingSigned or Signed state to be used. Referencing contracts that are Proposed, Obsolete, Rejected or Failed must result in a failure.</xs:documentation>
									<xs:documentation>Note: If the contract resides on another trust provider, the actual trust provider must first get it using getContract. If not able to, the operation fails.</xs:documentation>
									<xs:documentation>Note: Contract IDs are case insensitive in searches and references.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute name='nonce' type='xs:base64Binary' use='optional'>
								<xs:annotation>
									<xs:documentation>An optional base64-encoded nonce value that is used when encrypting protected parameter values.</xs:documentation>
									<xs:documentation>The nonce value is not allowed to change once it has been created.</xs:documentation>
									<xs:documentation>If not set by the creator of the contract, it will remain empty, or undefined.</xs:documentation>
									<xs:documentation>Attribute is only serialized if a non-empty nonce is available.</xs:documentation>
									<xs:documentation>A unique nonce ensures that parameter values are encrypted to unique representations in different contracts.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attributeGroup ref='visibilityAndDuration'>
								<xs:annotation>
									<xs:documentation>Attributes defining visibility and duration of contract.</xs:documentation>
								</xs:annotation>
							</xs:attributeGroup>
						</xs:complexType>
					</xs:element>
				</xs:choice>
				<xs:element ref='transient' minOccurs='0' maxOccurs='1'/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name='contract'>
		<xs:annotation>
			<xs:documentation>Element containing information about a contract.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:any minOccurs='1' maxOccurs='1' namespace='##any' processContents='lax'>
					<xs:annotation>
						<xs:documentation>Contents of the contract. Semantics is defined by qualified name of the element.</xs:documentation>
						<xs:documentation>If an XML scheme validating the contents is registered with the Trust Provider, it will be used to validate that the contents is well-formed and complete.</xs:documentation>
					</xs:annotation>
				</xs:any>
				<xs:element name='role' minOccurs='0' maxOccurs='unbounded'>
					<xs:annotation>
						<xs:documentation>Defines a role that is referenced from the signatures, and that can be referenced from the contract definition.</xs:documentation>
						<xs:documentation>Note: The selection of role has legal significance.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name='description' type='HumanReadableText' minOccurs='1' maxOccurs='unbounded'>
								<xs:annotation>
									<xs:documentation>Human-readable description of the role.</xs:documentation>
									<xs:documentation>Note: Multiple localized descriptions can be provided.</xs:documentation>
									<xs:documentation>Note: Use the xml:lang attribute to specify language used.</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:sequence>
						<xs:attribute name='name' type='NonEmptyString' use='required'>
							<xs:annotation>
								<xs:documentation>Machine readable name of the role.</xs:documentation>
								<xs:documentation>Note: Names are case-insensitive in searches and references.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name='minCount' type='xs:nonNegativeInteger' use='required'>
							<xs:annotation>
								<xs:documentation>Minimum amount of signatures required for this role, to make the contract legal.</xs:documentation>
								<xs:documentation>Note: A value of zero (0) defines an optional role.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name='maxCount' type='xs:nonNegativeInteger' use='required'>
							<xs:annotation>
								<xs:documentation>Maximum amount of signatures allowed for this role.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name='canRevoke' type='xs:boolean' use='optional' default='false'>
							<xs:annotation>
								<xs:documentation>If parts having this role, can revoke their signature, once signed.</xs:documentation>
								<xs:documentation>Revoking a signature can be used as a means to model consent-based agreements.</xs:documentation>
								<xs:documentation>Consent, in a privacy perspective, can typically be revoked.</xs:documentation>
								<xs:documentation>Revoking a signature is done, by calling obsoleteContract.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element ref='parts' minOccurs='0' maxOccurs='1'>
					<xs:annotation>
						<xs:documentation>This element defines the parts of the contract.</xs:documentation>
						<xs:documentation>Note: If not provided, the same parts as the template will be used.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref='parameters' minOccurs='0' maxOccurs='1'>
					<xs:annotation>
						<xs:documentation>Parameters can be referenced from the human and machine readable texts, and provide a mechanism to maintain the text consistent.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name='humanReadableText' type='HumanReadableText' minOccurs='1' maxOccurs='unbounded'>
					<xs:annotation>
						<xs:documentation>Human-readable version of the contract.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name='signature' minOccurs='0' maxOccurs='unbounded'>
					<xs:annotation>
						<xs:documentation>Signatures of the contract.</xs:documentation>
						<xs:documentation>The signature is calculated on the contract element excluding the id attribute and the signature, status and serverSignature elements.</xs:documentation>
						<xs:documentation>All text nodes and attribute values contain XML-encoded normalized Unicode text (in NFC).</xs:documentation>
						<xs:documentation>XML is normalized. Unnecessary white space removed. Space characters only allowed white-space.</xs:documentation>
						<xs:documentation>The normalized XML, with attributes in alphabetical order, using double quotes, xmlns attributes only when required, &amp;, &lt;, &gt;, &quot; and &apos; consistently escaped, empty elements are closed using /&gt;, and no space when ending empty elements, is UTF-8 encoded before being signed.</xs:documentation>
						<xs:documentation>The contract element never includes the xmlns attribute when calculating the signature.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:simpleContent>
							<xs:extension base='xs:base64Binary'>
								<xs:annotation>
									<xs:documentation>Digital signature generated by the corresponding asymmetric cipher algorithm.</xs:documentation>
								</xs:annotation>
								<xs:attribute name='legalId' type='NonEmptyString' use='required'>
									<xs:annotation>
										<xs:documentation>The ID of the legal identity used to generate the signature.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
								<xs:attribute name='bareJid' type='NonEmptyString' use='required'>
									<xs:annotation>
										<xs:documentation>The Bare JID of the client used to generate the signature.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
								<xs:attribute name='role' type='NonEmptyString' use='required'>
									<xs:annotation>
										<xs:documentation>The role the legal identity assumes when signing the contract.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
								<xs:attribute name='timestamp' type='xs:dateTime' use='required'>
									<xs:annotation>
										<xs:documentation>When the signature was generated.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
							</xs:extension>
						</xs:simpleContent>
					</xs:complexType>
				</xs:element>
				<xs:element ref='attachment' minOccurs='0' maxOccurs='unbounded'>
					<xs:annotation>
						<xs:documentation>Any attached items associated with the contract.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name='status' minOccurs='0' maxOccurs='1'>
					<xs:annotation>
						<xs:documentation>The status object is created and managed by the Trust Provider.</xs:documentation>
						<xs:documentation>Authorized clients can get the latest version of the contract by requesting it from the trust provider, given the id of the contract.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name='roleParameters' minOccurs='0' maxOccurs='1'>
								<xs:annotation>
									<xs:documentation>Optional element containing role-reference parameter values of signatories.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:sequence>
										<xs:element name='parameter' minOccurs='0' maxOccurs='unbounded'>
											<xs:annotation>
												<xs:documentation>Contains the value of a role reference parameter.</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:attribute name='name' type='xs:string' use='required'>
													<xs:annotation>
														<xs:documentation>The name of the role reference parameter.</xs:documentation>
													</xs:annotation>
												</xs:attribute>
												<xs:attribute name='value' type='xs:string' use='required'>
													<xs:annotation>
														<xs:documentation>The value of the role reference parameter.</xs:documentation>
													</xs:annotation>
												</xs:attribute>
											</xs:complexType>
										</xs:element>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name='provider' type='NonEmptyString' use='required'>
							<xs:annotation>
								<xs:documentation>JID of Trust Provider validating the correctness of the contract.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name='state' type='ContractState' use='required'>
							<xs:annotation>
								<xs:documentation>Contains information about the current statue of the contract.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name='created' type='xs:dateTime' use='required'>
							<xs:annotation>
								<xs:documentation>When the contract was first created.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name='updated' type='xs:dateTime' use='optional'>
							<xs:annotation>
								<xs:documentation>When the contract was last updated.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name='from' type='xs:dateTime' use='optional'>
							<xs:annotation>
								<xs:documentation>From when the contract is legally binding.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name='to' type='xs:dateTime' use='optional'>
							<xs:annotation>
								<xs:documentation>Until when the contract is legally binding.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name='templateId' type='NonEmptyString' use='optional'>
							<xs:annotation>
								<xs:documentation>Contract ID of template used to create the contract.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name='schemaDigest' type='xs:base64Binary' use='optional'>
							<xs:annotation>
								<xs:documentation>If the contents element has been validated using a schema, the hash digest of the schema used, base64 encoded, will be made available here.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name='schemaHashFunction' type='HashFunction' use='optional'>
							<xs:annotation>
								<xs:documentation>The Hash function used to compute the Hash Digest.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element name='serverSignature' minOccurs='0' maxOccurs='1'>
					<xs:annotation>
						<xs:documentation>Server signature of the contract.</xs:documentation>
						<xs:documentation>The signature is calculated on the contract element excluding the serverSignature element.</xs:documentation>
						<xs:documentation>All text nodes and attribute values contain XML-encoded normalized Unicode text (in NFC).</xs:documentation>
						<xs:documentation>XML is normalized. Unnecessary white space removed. Space characters only allowed whitespace.</xs:documentation>
						<xs:documentation>The normalized XML, with attributes in alphabetical order, using double quotes, xmlns attributes only when required, &amp;, &lt;, &gt;, &quot; and &apos; consistently escaped, empty elements are closed using /&gt;, and no space when ending empty element, is UTF-8 encoded before being signed.</xs:documentation>
						<xs:documentation>The contract element never includes the xmlns attribute when calculating the signature.</xs:documentation>
						<xs:documentation>Note: The purpose of the server signature, is to attest to the integrity of the contract.</xs:documentation>
						<xs:documentation>Note: Server keys may change over time. If a signature does not validate, make sure to get the most recent public key from the server and check signature again.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:simpleContent>
							<xs:extension base='xs:base64Binary'>
								<xs:annotation>
									<xs:documentation>Digital signature generated by the corresponding asymmetric cipher algorithm.</xs:documentation>
								</xs:annotation>
								<xs:attribute name='timestamp' type='xs:dateTime' use='required'>
									<xs:annotation>
										<xs:documentation>When the signature was generated.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
							</xs:extension>
						</xs:simpleContent>
					</xs:complexType>
				</xs:element>
				<xs:element ref='attachmentRef' minOccurs='0' maxOccurs='unbounded'>
					<xs:annotation>
						<xs:documentation>Any downloadable references to attachments assigned to the contract.</xs:documentation>
						<xs:documentation>As references might change over time, they are not included in signatures.</xs:documentation>
						<xs:documentation>All meta-data necessary to assert the validity and integrity of attachments are provided using attachment elements above.</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
			<xs:attributeGroup ref='visibilityAndDuration'>
				<xs:annotation>
					<xs:documentation>Attributes defining visibility and duration of contract.</xs:documentation>
				</xs:annotation>
			</xs:attributeGroup>
			<xs:attribute name='id' type='xs:string' use='optional'>
				<xs:annotation>
					<xs:documentation>An identifier assigned to the contract.</xs:documentation>
					<xs:documentation>The identifier is formed as a JID, but is not a JID. The domain part corresponds to the domain of the Trust Provider.</xs:documentation>
					<xs:documentation>A client must not include an identifier when it creates a contract on the Trust Provider.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='nonce' type='xs:base64Binary' use='optional'>
				<xs:annotation>
					<xs:documentation>An optional base64-encoded nonce value that is used when encrypting protected parameter values.</xs:documentation>
					<xs:documentation>The nonce value is not allowed to change once it has been created.</xs:documentation>
					<xs:documentation>If not set by the creator of the contract, it will remain empty, or undefined.</xs:documentation>
					<xs:documentation>Attribute is only serialized if a non-empty nonce is available.</xs:documentation>
					<xs:documentation>A unique nonce ensures that parameter values are encrypted to unique representations in different contracts.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='parameters' type='Parameters'>
		<xs:annotation>
			<xs:documentation>Defines a set of parameters of a contract.</xs:documentation>
		</xs:annotation>
	</xs:element>

	<xs:element name='transient' type='Parameters'>
		<xs:annotation>
			<xs:documentation>Defines a set of transient parameter values.</xs:documentation>
		</xs:annotation>
	</xs:element>

	<xs:complexType name='Parameters'>
		<xs:choice minOccurs='1' maxOccurs='unbounded'>
			<xs:element name='stringParameter' type='StringParameter'>
				<xs:annotation>
					<xs:documentation>String-valued parameter.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='numericalParameter' type='NumericalParameter'>
				<xs:annotation>
					<xs:documentation>Numerical parameter.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='booleanParameter' type='BooleanParameter'>
				<xs:annotation>
					<xs:documentation>Boolean parameter.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='dateParameter' type='DateParameter'>
				<xs:annotation>
					<xs:documentation>Date parameter.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='timeParameter' type='TimeParameter'>
				<xs:annotation>
					<xs:documentation>Time parameter.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='dateTimeParameter' type='DateTimeParameter'>
				<xs:annotation>
					<xs:documentation>Date and Time parameter.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='durationParameter' type='DurationParameter'>
				<xs:annotation>
					<xs:documentation>Duration parameter.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='geoParameter' type='GeoParameter'>
				<xs:annotation>
					<xs:documentation>Geo-spatial parameter.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='calcParameter' type='CalcParameter'>
				<xs:annotation>
					<xs:documentation>Calculation parameter.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='roleParameter' type='RoleParameter'>
				<xs:annotation>
					<xs:documentation>Role reference parameter.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='contractReferenceParameter' type='ContractReferenceParameter'>
				<xs:annotation>
					<xs:documentation>Contract reference parameter.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='attachmentParameter' type='AttachmentParameter'>
				<xs:annotation>
					<xs:documentation>Attachment reference parameter.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='recordSet' type='RecordSet'>
				<xs:annotation>
					<xs:documentation>Groups a set of parameters into a vector of sets of parameters.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:complexType>

	<xs:complexType name='RecordSet'>
		<xs:annotation>
			<xs:documentation>Contains a set of parameters that form a record.</xs:documentation>
			<xs:documentation>The record can be repeated forming a set of records, or record set.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name='description' type='HumanReadableText' minOccurs='0' maxOccurs='unbounded'>
				<xs:annotation>
					<xs:documentation>Human-readable description of the record set.</xs:documentation>
					<xs:documentation>Note: Multiple localized descriptions can be provided.</xs:documentation>
					<xs:documentation>Note: Use the xml:lang attribute to specify language used.</xs:documentation>
					<xs:documentation>Note: Descriptions are not required, if descriptions are available in the template.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='recordDefinition' type='Parameters' minOccurs='1' maxOccurs='1'>
				<xs:annotation>
					<xs:documentation>Defines a set of parameters forming one record in the record set.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='record' type='Parameters' minOccurs='0' maxOccurs='unbounded'>
				<xs:annotation>
					<xs:documentation>Defines one record of data in the record set.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name='name' type='NonEmptyString' use='required'>
			<xs:annotation>
				<xs:documentation>The name of the record set.</xs:documentation>
				<xs:documentation>Note: Names are case-insensitive in searches and references.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name='exp' type='xs:string' use='optional'>
			<xs:annotation>
				<xs:documentation>Optional script expression validating the parameter.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name='maxRecords' type='xs:positiveInteger' use='required'>
			<xs:annotation>
				<xs:documentation>Maximum number of records in the record set.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name='minRecords' type='xs:nonNegativeInteger' use='required'>
			<xs:annotation>
				<xs:documentation>Minimum number of records in the record set.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name='Parameter' abstract='true'>
		<xs:annotation>
			<xs:documentation>Abstract base type of contractual parameters.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name='description' type='HumanReadableText' minOccurs='0' maxOccurs='unbounded'>
				<xs:annotation>
					<xs:documentation>Human-readable description of the parameter.</xs:documentation>
					<xs:documentation>Note: Multiple localized descriptions can be provided.</xs:documentation>
					<xs:documentation>Note: Use the xml:lang attribute to specify language used.</xs:documentation>
					<xs:documentation>Note: Descriptions are not required, if descriptions are available in the template.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name='name' type='NonEmptyString' use='required'>
			<xs:annotation>
				<xs:documentation>The name of the parameter.</xs:documentation>
				<xs:documentation>Note: Names are case-insensitive in searches and references.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name='guide' type='xs:string' use='optional'>
			<xs:annotation>
				<xs:documentation>A guiding text, that can be displayed to a user if no value is available.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name='exp' type='xs:string' use='optional'>
			<xs:annotation>
				<xs:documentation>Optional script expression validating the parameter.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name='protection' type='ProtectionLevel' use='optional'>
			<xs:annotation>
				<xs:documentation>Level of confidentiality of the information provided by the parameter.</xs:documentation>
				<xs:documentation>If attribute is not provided, parameter value is treated as a normal parameter value.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name='protected' type='xs:base64Binary' use='optional'>
			<xs:annotation>
				<xs:documentation>This attribute replaces the value attribute, if the parameter protection level is Encrypted or Transient.</xs:documentation>
				<xs:documentation>For Transient parameters, this value will contain the base64-encoded binary representation of a GUID.</xs:documentation>
				<xs:documentation>For Encrypted parameters, the value will contain the base64-encoded encryption of the parameter value.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:simpleType name='ProtectionLevel'>
		<xs:annotation>
			<xs:documentation>Defines different Information Protection Levels.</xs:documentation>
			<xs:documentation>If no protection level is defined, values will be stored in the clear.</xs:documentation>
		</xs:annotation>
		<xs:restriction base='xs:string'>
			<xs:enumeration value='Encrypted'>
				<xs:annotation>
					<xs:documentation>The creator of a contract creates keys for the encryption and decryption of encrypted parameter values.</xs:documentation>
					<xs:documentation>The creator is responsible for sharing the keys with the other parts of the contract, using end-to-end encrypted communication.</xs:documentation>
					<xs:documentation>Only the parts who have received the shared secret can access the values of encrypted parameters.</xs:documentation>
					<xs:documentation>Encrypted parameter values are not available in logs.</xs:documentation>
					<xs:documentation>The UTF-8 encoding of the XML string representation of the parameter value is the clear text, prefixed by a random non-zero byte (see below), and suffixed by a number of code 0 bytes, is being encrypted.</xs:documentation>
					<xs:documentation>If no parameter value is available (i.e. null value), only a string representing the suffix of code 0 characters is encrypted.</xs:documentation>
					<xs:documentation>The length of the suffix string is calculated first by computing the SHA-256 hash of the concatenation of the encryption key, contract nonce and 4-byte encoding of the zero-based parameter index. The first byte of the hash is the length of the suffix string. The next non-zero byte in the hash represents the prefix, in case the encrypted string is not null.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value='Transient'>
				<xs:annotation>
					<xs:documentation>A transient parameter is sent out-of-scope of the signature.</xs:documentation>
					<xs:documentation>Instead, a GUID is used as a parameter value.</xs:documentation>
					<xs:documentation>This GUID can be used to peers to validate the signature of the contract.</xs:documentation>
					<xs:documentation>Transient parameters can be used to protect the privacy or secrecy of certain information, such as credit card information, voting, etc.</xs:documentation>
					<xs:documentation>Transient parameter values are only available in-transit, and must not be persisted.</xs:documentation>
					<xs:documentation>Transient parameter values are not transmitted to other parts of the contract, and cannot be displayed in human-readable text.</xs:documentation>
					<xs:documentation>Transient parameter values are not available in logs.</xs:documentation>
					<xs:documentation>Transient parameter values are not persisted.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name='StringParameter'>
		<xs:annotation>
			<xs:documentation>Type representing a string-valued contractual parameter.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base='Parameter'>
				<xs:attribute name='value' type='xs:string' use='optional'>
					<xs:annotation>
						<xs:documentation>The value of the parameter.</xs:documentation>
						<xs:documentation>The value attribute is required for contracts, but optional for templates.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='regEx' type='xs:string' use='optional'>
					<xs:annotation>
						<xs:documentation>Optional regular expression to validate the value of the string parameter.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='min' type='xs:string' use='optional'>
					<xs:annotation>
						<xs:documentation>Optional minimum value of the parameter.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='minIncluded' type='xs:boolean' use='optional' default='true'>
					<xs:annotation>
						<xs:documentation>If the `min` value is part of the valid range or not.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='max' type='xs:string' use='optional'>
					<xs:annotation>
						<xs:documentation>Optional maximum value of the parameter.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='maxIncluded' type='xs:boolean' use='optional' default='true'>
					<xs:annotation>
						<xs:documentation>If the `max` value is part of the valid range or not.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='minLength' type='xs:nonNegativeInteger' use='optional'>
					<xs:annotation>
						<xs:documentation>Optional minimum lenth of the value of the parameter.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='maxLength' type='xs:positiveInteger' use='optional'>
					<xs:annotation>
						<xs:documentation>Optional maximum lenth of the value of the parameter.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name='NumericalParameter'>
		<xs:annotation>
			<xs:documentation>Type representing a numerical contractual parameter.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base='Parameter'>
				<xs:attribute name='value' type='xs:decimal' use='optional'>
					<xs:annotation>
						<xs:documentation>The value of the parameter.</xs:documentation>
						<xs:documentation>The value attribute is required for contracts, but optional for templates.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='min' type='xs:decimal' use='optional'>
					<xs:annotation>
						<xs:documentation>Optional minimum value of the parameter.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='minIncluded' type='xs:boolean' use='optional' default='true'>
					<xs:annotation>
						<xs:documentation>If the `min` value is part of the valid range or not.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='max' type='xs:decimal' use='optional'>
					<xs:annotation>
						<xs:documentation>Optional maximum value of the parameter.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='maxIncluded' type='xs:boolean' use='optional' default='true'>
					<xs:annotation>
						<xs:documentation>If the `max` value is part of the valid range or not.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name='BooleanParameter'>
		<xs:annotation>
			<xs:documentation>Type representing a Boolean contractual parameter.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base='Parameter'>
				<xs:attribute name='value' type='xs:boolean' use='optional'>
					<xs:annotation>
						<xs:documentation>The value of the parameter.</xs:documentation>
						<xs:documentation>The value attribute is required for contracts, but optional for templates.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name='DateParameter'>
		<xs:annotation>
			<xs:documentation>Type representing a Date contractual parameter.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base='Parameter'>
				<xs:attribute name='value' type='xs:date' use='optional'>
					<xs:annotation>
						<xs:documentation>The value of the parameter.</xs:documentation>
						<xs:documentation>The value attribute is required for contracts, but optional for templates.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='min' type='xs:date' use='optional'>
					<xs:annotation>
						<xs:documentation>Optional minimum value of the parameter.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='minIncluded' type='xs:boolean' use='optional' default='true'>
					<xs:annotation>
						<xs:documentation>If the `min` value is part of the valid range or not.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='max' type='xs:date' use='optional'>
					<xs:annotation>
						<xs:documentation>Optional maximum value of the parameter.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='maxIncluded' type='xs:boolean' use='optional' default='true'>
					<xs:annotation>
						<xs:documentation>If the `max` value is part of the valid range or not.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name='DateTimeParameter'>
		<xs:annotation>
			<xs:documentation>Type representing a Date and Time contractual parameter.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base='Parameter'>
				<xs:attribute name='value' type='xs:dateTime' use='optional'>
					<xs:annotation>
						<xs:documentation>The value of the parameter.</xs:documentation>
						<xs:documentation>The value attribute is required for contracts, but optional for templates.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='min' type='xs:dateTime' use='optional'>
					<xs:annotation>
						<xs:documentation>Optional minimum value of the parameter.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='minIncluded' type='xs:boolean' use='optional' default='true'>
					<xs:annotation>
						<xs:documentation>If the `min` value is part of the valid range or not.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='max' type='xs:dateTime' use='optional'>
					<xs:annotation>
						<xs:documentation>Optional maximum value of the parameter.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='maxIncluded' type='xs:boolean' use='optional' default='true'>
					<xs:annotation>
						<xs:documentation>If the `max` value is part of the valid range or not.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name='TimeParameter'>
		<xs:annotation>
			<xs:documentation>Type representing a Time contractual parameter.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base='Parameter'>
				<xs:attribute name='value' type='xs:time' use='optional'>
					<xs:annotation>
						<xs:documentation>The value of the parameter.</xs:documentation>
						<xs:documentation>The value attribute is required for contracts, but optional for templates.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='min' type='xs:time' use='optional'>
					<xs:annotation>
						<xs:documentation>Optional minimum value of the parameter.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='minIncluded' type='xs:boolean' use='optional' default='true'>
					<xs:annotation>
						<xs:documentation>If the `min` value is part of the valid range or not.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='max' type='xs:time' use='optional'>
					<xs:annotation>
						<xs:documentation>Optional maximum value of the parameter.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='maxIncluded' type='xs:boolean' use='optional' default='true'>
					<xs:annotation>
						<xs:documentation>If the `max` value is part of the valid range or not.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name='DurationParameter'>
		<xs:annotation>
			<xs:documentation>Type representing a Duration contractual parameter.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base='Parameter'>
				<xs:attribute name='value' type='xs:duration' use='optional'>
					<xs:annotation>
						<xs:documentation>The value of the parameter.</xs:documentation>
						<xs:documentation>The value attribute is required for contracts, but optional for templates.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='min' type='xs:duration' use='optional'>
					<xs:annotation>
						<xs:documentation>Optional minimum value of the parameter.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='minIncluded' type='xs:boolean' use='optional' default='true'>
					<xs:annotation>
						<xs:documentation>If the `min` value is part of the valid range or not.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='max' type='xs:duration' use='optional'>
					<xs:annotation>
						<xs:documentation>Optional maximum value of the parameter.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='maxIncluded' type='xs:boolean' use='optional' default='true'>
					<xs:annotation>
						<xs:documentation>If the `max` value is part of the valid range or not.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name='GeoParameter'>
		<xs:annotation>
			<xs:documentation>Type representing a geo-spatial contractual parameter.</xs:documentation>
			<xs:documentation>The Value contains two or three floating-point coordiate values separated by commas (lat,long) or (lat,long,alt).</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base='Parameter'>
				<xs:attribute name='value' type='GeoSpatial' use='optional'>
					<xs:annotation>
						<xs:documentation>The value of the parameter.</xs:documentation>
						<xs:documentation>The value attribute is required for contracts, but optional for templates.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='contractLocation' type='xs:boolean' use='optional' default='false'>
					<xs:annotation>
						<xs:documentation>If the parameter represents the location of the actual contract, or contents of the contract.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='min' type='GeoSpatial' use='optional'>
					<xs:annotation>
						<xs:documentation>Optional minimum value of the parameter.</xs:documentation>
						<xs:documentation>Corresponds to the upper-left-hand corner of a square, on the Mercator map.</xs:documentation>
						<xs:documentation>If max.lat>min.lat, or max.long>min.long, the square wraps around the edges of the map.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='minIncluded' type='xs:boolean' use='optional' default='true'>
					<xs:annotation>
						<xs:documentation>If the `min` value is part of the valid range or not.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='max' type='GeoSpatial' use='optional'>
					<xs:annotation>
						<xs:documentation>Optional maximum value of the parameter.</xs:documentation>
						<xs:documentation>Corresponds to the lower-right-hand corner of a square, on the Mercator map.</xs:documentation>
						<xs:documentation>If max.lat>min.lat, or max.long>min.long, the square wraps around the edges of the map.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='maxIncluded' type='xs:boolean' use='optional' default='true'>
					<xs:annotation>
						<xs:documentation>If the `max` value is part of the valid range or not.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='altitude' use='optional' default='optional'>
					<xs:annotation>
						<xs:documentation>Defines how to handle altitude in the position.</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base='xs:string'>
							<xs:enumeration value='required'>
								<xs:annotation>
									<xs:documentation>Altitude is required by the parameter.</xs:documentation>
								</xs:annotation>
							</xs:enumeration>
							<xs:enumeration value='optional'>
								<xs:annotation>
									<xs:documentation>Altitude is optional by the parameter.</xs:documentation>
								</xs:annotation>
							</xs:enumeration>
							<xs:enumeration value='prohibited'>
								<xs:annotation>
									<xs:documentation>Altitude is prohibited by the parameter.</xs:documentation>
								</xs:annotation>
							</xs:enumeration>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:simpleType name='GeoSpatial'>
		<xs:annotation>
			<xs:documentation>Simple type representing a geo-spatial value.</xs:documentation>
			<xs:documentation>The Value contains two or three floating-point coordiate values separated by commas (lat,long) or (lat,long,alt). The period character is used as decimal point.</xs:documentation>
			<xs:documentation>The floating-point values are not validated to be in the ranges [-90,90] and [-180,180] by the regular expression. Software must perform such validation separately.</xs:documentation>
		</xs:annotation>
		<xs:restriction base='xs:string'>
			<xs:pattern value="(?'Lat'-?\d+(\.\d+)?),(?'Long'-?\d+(\.\d+)?)(,(?'Alt'-?\d+(\.\d+)?))?"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name='CalcParameter'>
		<xs:annotation>
			<xs:documentation>Type representing a Calculation contractual parameter.</xs:documentation>
			<xs:documentation>The exp attribute is used to calculate the value of the parameter, rather than validate its valid.</xs:documentation>
			<xs:documentation>Expressions used to calculate values reference other parameter values by name.</xs:documentation>
			<xs:documentation>Only non-calculation parameters (anywhere in the contract), or calculation parameters defined before a calculation parameter being evaluated, can be referenced however, in order to avoid circular recursion.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base='Parameter'/>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name='RoleParameter'>
		<xs:annotation>
			<xs:documentation>Type representing a contractual parameter based on a property in one of the signatories identities.</xs:documentation>
			<xs:documentation>The role attribute is used to reference the role the party uses when signing the contract.</xs:documentation>
			<xs:documentation>The index attribute references the order (first being 1) of the role of the signatory.</xs:documentation>
			<xs:documentation>The identity property is indicated by the property attribute.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base='Parameter'>
				<xs:attribute name='role' type='xs:string' use='required'>
					<xs:annotation>
						<xs:documentation>Name of the role of the signatory.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='index' type='xs:positiveInteger' use='required'>
					<xs:annotation>
						<xs:documentation>Index of signature of the of the signatory for the corresponding role.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='property' type='xs:string' use='required'>
					<xs:annotation>
						<xs:documentation>Name of the ID property of the signatory.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='required' type='xs:boolean' use='optional' default='false'>
					<xs:annotation>
						<xs:documentation>If existance of the signatory and property value is required or not for the contract to be complete.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name='ContractReferenceParameter'>
		<xs:annotation>
			<xs:documentation>Type representing a reference to a smart contract.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base='Parameter'>
				<xs:sequence>
					<xs:element name='label' minOccurs='0' maxOccurs='unbounded'>
						<xs:annotation>
							<xs:documentation>Human-readable label to be shown in stead of a reference, in contract text.</xs:documentation>
							<xs:documentation>Note: Multiple localized labels can be provided.</xs:documentation>
							<xs:documentation>Note: Use the xml:lang attribute to specify language used.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:group ref='InlineElements' minOccurs='1' maxOccurs='unbounded'/>
							<xs:attribute ref='xml:lang' use='optional'>
								<xs:annotation>
									<xs:documentation>Language used in the human-readable text.</xs:documentation>
									<xs:documentation>If no language is specified, the description will be considered the default description.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
				<xs:attribute name='value' type='xs:string' use='optional'>
					<xs:annotation>
						<xs:documentation>The value of the parameter, containing the ID of the contract that is being referenced.</xs:documentation>
						<xs:documentation>The value attribute is required for contracts, but optional for templates.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='required' type='xs:boolean' use='optional' default='false'>
					<xs:annotation>
						<xs:documentation>If the reference parameter is required or not.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='localName' type='xs:string' use='optional'>
					<xs:annotation>
						<xs:documentation>Restriction on the local name of the machine-readable part of the referenced contract.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='namespace' type='xs:string' use='optional'>
					<xs:annotation>
						<xs:documentation>Restriction on the namespace of the machine-readable part of the referenced contract.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='templateId' type='xs:string' use='optional'>
					<xs:annotation>
						<xs:documentation>Restriction on the Template ID of the referenced contract.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='provider' type='xs:string' use='optional'>
					<xs:annotation>
						<xs:documentation>Restriction on the provider of the referenced contract.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='creatorRole' type='xs:string' use='optional'>
					<xs:annotation>
						<xs:documentation>Restriction on the role the creator must have in the referenced contract.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name='AttachmentParameter'>
		<xs:annotation>
			<xs:documentation>Type representing a reference to an attachment that must be uploaded before the contract can be signed.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base='Parameter'>
				<xs:attribute name='value' type='xs:string' use='optional'>
					<xs:annotation>
						<xs:documentation>The file name of the attachment to upload.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='required' type='xs:boolean' use='optional' default='false'>
					<xs:annotation>
						<xs:documentation>If the attachment is required or not.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='contentType' type='xs:string' use='optional'>
					<xs:annotation>
						<xs:documentation>Restriction on the Content-Type of the attachment.</xs:documentation>
						<xs:documentation>Wildcards are permitted.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='minSize' type='xs:positiveInteger' use='optional'>
					<xs:annotation>
						<xs:documentation>Smallest acceptable size of attachment, in bytes.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='maxSize' type='xs:positiveInteger' use='optional'>
					<xs:annotation>
						<xs:documentation>Largest acceptable size of attachment, in bytes.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='minWidth' type='xs:positiveInteger' use='optional'>
					<xs:annotation>
						<xs:documentation>Smallest acceptable width of attachment, in pixels, if relevant.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='maxWidth' type='xs:positiveInteger' use='optional'>
					<xs:annotation>
						<xs:documentation>Largest acceptable width of attachment, in pixels, if relevant.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='minHeight' type='xs:positiveInteger' use='optional'>
					<xs:annotation>
						<xs:documentation>Smallest acceptable height of attachment, in pixels, if relevant.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='maxHeight' type='xs:positiveInteger' use='optional'>
					<xs:annotation>
						<xs:documentation>Largest acceptable height of attachment, in pixels, if relevant.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name='parts'>
		<xs:annotation>
			<xs:documentation>This element defines the parts of the contract.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice minOccurs='1' maxOccurs='1'>
				<xs:element name='open' minOccurs='1' maxOccurs='1'>
					<xs:annotation>
						<xs:documentation>The contract is an open contract that anybody can sign.</xs:documentation>
					</xs:annotation>
					<xs:complexType/>
				</xs:element>
				<xs:element name='templateOnly' minOccurs='1' maxOccurs='1'>
					<xs:annotation>
						<xs:documentation>The contract is only a template, and cannot be signed.</xs:documentation>
					</xs:annotation>
					<xs:complexType/>
				</xs:element>
				<xs:element name='part' minOccurs='1' maxOccurs='unbounded'>
					<xs:annotation>
						<xs:documentation>Defines a part of a contract.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name='legalId' type='NonEmptyString' use='required'>
							<xs:annotation>
								<xs:documentation>Refers to a legal identity representing a part of the contract.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name='role' type='NonEmptyString' use='required'>
							<xs:annotation>
								<xs:documentation>Refers to one of the roles defined for the contract.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
			</xs:choice>
		</xs:complexType>
	</xs:element>

	<xs:attributeGroup name='visibilityAndDuration'>
		<xs:attribute name='visibility' type='ContractVisibility' use='required'>
			<xs:annotation>
				<xs:documentation>What visibility the contract should have, or has.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name='canActAsTemplate' type='xs:boolean' use='required'>
			<xs:annotation>
				<xs:documentation>If the contract can act as a template for future contracts.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name='duration' type='xs:duration' use='required'>
			<xs:annotation>
				<xs:documentation>The duration of the contract. The duration is calculated from the time of the last required signature.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name='archiveReq' type='xs:duration' use='required'>
			<xs:annotation>
				<xs:documentation>After a legally binding contract expires, this attribute specifies for how long the contract is required to be persisted in the archives before it can be manually deleted.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name='archiveOpt' type='xs:duration' use='required'>
			<xs:annotation>
				<xs:documentation>After a legally binding contract expires, and the archiveReq period has expired, this attribute specifies an additional duration after which it is automatically deleted.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name='signAfter' type='xs:dateTime'	use='optional'>
			<xs:annotation>
				<xs:documentation>Signatures will only be accepted after this point in time.</xs:documentation>
				<xs:documentation>Note: signatureAfter (if provided) must occur before signatureBefore (if provided).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name='signBefore' type='xs:dateTime'	use='optional'>
			<xs:annotation>
				<xs:documentation>Signatures will only be accepted until this point in time.</xs:documentation>
				<xs:documentation>Note: signatureAfter (if provided) must occur before signatureBefore (if provided).</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>

	<xs:simpleType name='ContractState'>
		<xs:annotation>
			<xs:documentation>Lists recognized contract states.</xs:documentation>
		</xs:annotation>
		<xs:restriction base='xs:string'>
			<xs:enumeration value='Proposed'>
				<xs:annotation>
					<xs:documentation>The contract has been proposed as a new contract.</xs:documentation>
					<xs:documentation>It needs to be reviewed and approved by the Trust Provider before it can be used as a template or be signed.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value='Rejected'>
				<xs:annotation>
					<xs:documentation>The contract has been deemed incomplete, inconsistent, or otherwise faulty.</xs:documentation>
					<xs:documentation>A rejected contract cannot be used as a template or be signed.</xs:documentation>
					<xs:documentation>A rejected contract can be updated by the creator, and thus be put in a Proposed state again.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value='Approved'>
				<xs:annotation>
					<xs:documentation>The contract has been reviewed and approved. It is still not signed, but can act as a template for other contracts.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value='BeingSigned'>
				<xs:annotation>
					<xs:documentation>The contract is being signed. Not all required roles have signed however, and the contract is not legally binding.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value='Signed'>
				<xs:annotation>
					<xs:documentation>The contract has been signed by all required parties, and is legally binding.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value='Failed'>
				<xs:annotation>
					<xs:documentation>The contract, once signed, has either manually, or automatically, been deemed failed, by the Trust Provider. This can happen when any of the parties fail to fulfill their obligations as defined by the contract.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value='Obsoleted'>
				<xs:annotation>
					<xs:documentation>The contract has been explicitly obsoleted by its owner, or by the Trust Provider.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name='HashFunction'>
		<xs:restriction base='xs:string'>
			<xs:enumeration value='SHA256'>
				<xs:annotation>
					<xs:documentation>SHA-256 Hash function</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value='SHA384'>
				<xs:annotation>
					<xs:documentation>SHA-384 Hash function</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value='SHA512'>
				<xs:annotation>
					<xs:documentation>SHA-512 Hash function</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name='ContractVisibility'>
		<xs:annotation>
			<xs:documentation>Visibility types for contracts.</xs:documentation>
		</xs:annotation>
		<xs:restriction base='xs:string'>
			<xs:enumeration value='CreatorAndParts'>
				<xs:annotation>
					<xs:documentation>Contract is only accessible to the creator, and any parts in the contract.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value='DomainAndParts'>
				<xs:annotation>
					<xs:documentation>Contract is accessible to the creator of the contract, any parts in the contract, and any account on the Trust Provider server domain.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value='Public'>
				<xs:annotation>
					<xs:documentation>Contract is accessible by everyone requesting it. It is not searchable.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value='PublicSearchable'>
				<xs:annotation>
					<xs:documentation>Contract is accessible by everyone requesting it. It is also searchable.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name='HumanReadableText'>
		<xs:annotation>
			<xs:documentation>Type defining the structure of human-readable text in contracts.</xs:documentation>
		</xs:annotation>
		<xs:group ref='BlockElements' minOccurs='1' maxOccurs='unbounded'>
			<xs:annotation>
				<xs:documentation>Human readable text is first seen as a sequence of block constructs.</xs:documentation>
			</xs:annotation>
		</xs:group>
		<xs:attribute ref='xml:lang' use='optional'>
			<xs:annotation>
				<xs:documentation>Language used in the human-readable text.</xs:documentation>
				<xs:documentation>If no language is specified, the description will be considered the default description.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:group name='BlockElements'>
		<xs:annotation>
			<xs:documentation>Block-level constructs of human-readable text.</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name='paragraph'>
				<xs:annotation>
					<xs:documentation>Defines a paragraph of human-readable text.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:group ref='InlineElements' minOccurs='1' maxOccurs='unbounded'/>
				</xs:complexType>
			</xs:element>
			<xs:element name='section'>
				<xs:annotation>
					<xs:documentation>Defines a section having a header and a body of text.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name='header'>
							<xs:annotation>
								<xs:documentation>Defines a header for the section.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:group ref='InlineElements' minOccurs='1' maxOccurs='unbounded'/>
							</xs:complexType>
						</xs:element>
						<xs:element name='body'>
							<xs:annotation>
								<xs:documentation>Defines the body of the section.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:group ref='BlockElements' minOccurs='1' maxOccurs='unbounded'/>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name='bulletItems'>
				<xs:annotation>
					<xs:documentation>A sequence of bullet items of human-readable text.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name='item' minOccurs='1' maxOccurs='unbounded'>
							<xs:annotation>
								<xs:documentation>Represents one item in the list.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:choice>
									<xs:group ref='InlineElements' minOccurs='1' maxOccurs='unbounded'/>
									<xs:group ref='BlockElements' minOccurs='1' maxOccurs='unbounded'/>
								</xs:choice>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name='numberedItems'>
				<xs:annotation>
					<xs:documentation>A sequence of numbered items of human-readable text.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name='item' minOccurs='1' maxOccurs='unbounded'>
							<xs:annotation>
								<xs:documentation>Represents one item in the list.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:choice>
									<xs:group ref='InlineElements' minOccurs='1' maxOccurs='unbounded'/>
									<xs:group ref='BlockElements' minOccurs='1' maxOccurs='unbounded'/>
								</xs:choice>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name='imageStandalone' type='ImageType'>
				<xs:annotation>
					<xs:documentation>Shows a standalone image.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='separator' type='Empty'>
				<xs:annotation>
					<xs:documentation>Displays a horizontal separator.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='table'>
				<xs:annotation>
					<xs:documentation>A table consisting of rows and cells.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name='row' minOccurs='1' maxOccurs='unbounded'>
							<xs:annotation>
								<xs:documentation>Represents one row in the table.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name='cell' minOccurs='1' maxOccurs='unbounded'>
										<xs:annotation>
											<xs:documentation>Represents one cell in the table row.</xs:documentation>
										</xs:annotation>
										<xs:complexType>
											<xs:choice>
												<xs:group ref='InlineElements' minOccurs='0' maxOccurs='unbounded'/>
												<xs:group ref='BlockElements' minOccurs='0' maxOccurs='unbounded'/>
											</xs:choice>
											<xs:attribute name='alignment' use='required'>
												<xs:annotation>
													<xs:documentation>Horizontal alignment of contents in cell.</xs:documentation>
												</xs:annotation>
												<xs:simpleType>
													<xs:restriction base='xs:string'>
														<xs:enumeration value='Left'/>
														<xs:enumeration value='Right'/>
														<xs:enumeration value='Center'/>
													</xs:restriction>
												</xs:simpleType>
											</xs:attribute>
											<xs:attribute name='colSpan' type='xs:positiveInteger' use='required'>
												<xs:annotation>
													<xs:documentation>The number of columns the cell spans.</xs:documentation>
													<xs:documentation>Default value is 1, i.e. the cell only spans one column.</xs:documentation>
												</xs:annotation>
											</xs:attribute>
											<xs:attribute name='header' type='xs:boolean' use='required'>
												<xs:annotation>
													<xs:documentation>If the cell represents a header cell (true) or a normal cell (false).</xs:documentation>
													<xs:documentation>Default value is false, i.e. cell is a normal cell.</xs:documentation>
												</xs:annotation>
											</xs:attribute>
										</xs:complexType>
									</xs:element>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:choice>
	</xs:group>

	<xs:group name='InlineElements'>
		<xs:annotation>
			<xs:documentation>Inline-level constructs of human-readable text.</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name='text' type='NonEmptyString'>
				<xs:annotation>
					<xs:documentation>Some unformatted human-readable text.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='parameter'>
				<xs:annotation>
					<xs:documentation>Is replaced by the value of a referenced parameter.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="name" type="NonEmptyString" use="required"/>
				</xs:complexType>
			</xs:element>
			<xs:element name='bold'>
				<xs:annotation>
					<xs:documentation>Bold human-readdable text.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:group ref='InlineElements' minOccurs='1' maxOccurs='unbounded'/>
				</xs:complexType>
			</xs:element>
			<xs:element name='italic'>
				<xs:annotation>
					<xs:documentation>Italic human-readdable text.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:group ref='InlineElements' minOccurs='1' maxOccurs='unbounded'/>
				</xs:complexType>
			</xs:element>
			<xs:element name='underline'>
				<xs:annotation>
					<xs:documentation>Underline human-readdable text.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:group ref='InlineElements' minOccurs='1' maxOccurs='unbounded'/>
				</xs:complexType>
			</xs:element>
			<xs:element name='strikeThrough'>
				<xs:annotation>
					<xs:documentation>Human-readdable text that is stricken through.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:group ref='InlineElements' minOccurs='1' maxOccurs='unbounded'/>
				</xs:complexType>
			</xs:element>
			<xs:element name='super'>
				<xs:annotation>
					<xs:documentation>Super-script human-readdable text.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:group ref='InlineElements' minOccurs='1' maxOccurs='unbounded'/>
				</xs:complexType>
			</xs:element>
			<xs:element name='sub'>
				<xs:annotation>
					<xs:documentation>Sub-script human-readdable text.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:group ref='InlineElements' minOccurs='1' maxOccurs='unbounded'/>
				</xs:complexType>
			</xs:element>
			<xs:element name='lineBreak' type='Empty'>
				<xs:annotation>
					<xs:documentation>Breaks the current line. Following text is rendered on the following line.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='imageInline' type='ImageType'>
				<xs:annotation>
					<xs:documentation>Shows an inline image.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:group>

	<xs:complexType name='Empty'/>

	<xs:simpleType name='NonEmptyString'>
		<xs:restriction base='xs:string'>
			<xs:minLength value='1'/>
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name='ImageType'>
		<xs:sequence>
			<xs:element name='binary' type='xs:base64Binary'>
				<xs:annotation>
					<xs:documentation>Base64-encoded binary representation of image.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='caption'>
				<xs:annotation>
					<xs:documentation>Defines an image caption, or alternative text.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:group ref='InlineElements' minOccurs='1' maxOccurs='unbounded'/>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
		<xs:attribute name='contentType' use='required'>
			<xs:annotation>
				<xs:documentation>Internet-Content type of image.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base='xs:string'>
					<xs:pattern value='(^image)(\/)[a-zA-Z0-9_\-+]*'/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name='width' type='ImageSize' use='required'>
			<xs:annotation>
				<xs:documentation>Width of image, in pixels.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name='height' type='ImageSize' use='required'>
			<xs:annotation>
				<xs:documentation>Height of image, in pixels.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:simpleType name='ImageSize'>
		<xs:restriction base='xs:positiveInteger'>
			<xs:maxInclusive value='2048'/>
		</xs:restriction>
	</xs:simpleType>

	<xs:element name='getCreatedContracts'>
		<xs:annotation>
			<xs:documentation>Sent by a client in an iq get to a Trust Provider, to retrieve a list (possibly empty) of contracts created by the legal identity of the client on the provider.</xs:documentation>
			<xs:documentation>Expected response element: contractReferences, if references are to be returned.</xs:documentation>
			<xs:documentation>Expected response element: contracts, if full contracts are to be returned.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name='offset' type='xs:nonNegativeInteger' use='optional'>
				<xs:annotation>
					<xs:documentation>Result will start with the response at this offset into result set.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='maxCount' type='xs:positiveInteger' use='optional'>
				<xs:annotation>
					<xs:documentation>Result will be limited to this number of items.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='references' type='xs:boolean' use='optional' default='true'>
				<xs:annotation>
					<xs:documentation>If only contract references are to be returned.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='signContract'>
		<xs:annotation>
			<xs:documentation>Sent by a client in an iq set to a Trust Provider hosting a contract that the client wants to sign.</xs:documentation>
			<xs:documentation>Expected response element: contract</xs:documentation>
			<xs:documentation>The signature of the contract using the current approved legal identity of the client.</xs:documentation>
			<xs:documentation>The signature is calculated on the contract element excluding the id attribute and the signature, status and serverSignature elements.</xs:documentation>
			<xs:documentation>All text nodes and attribute values contain XML-encoded normalized Unicode text (in NFC).</xs:documentation>
			<xs:documentation>XML is normalized. Unnecessary white space removed. Space characters only allowed whitespace.</xs:documentation>
			<xs:documentation>The normalized XML, with attributes in alphabetical order, using double quotes, xmlns attributes only when required, &amp;, &lt;, &gt;, &quot; and &apos; consistently escaped, empty elements are closed using /&gt;, and no space when ending empty element, is UTF-8 encoded before being signed.</xs:documentation>
			<xs:documentation>The contract element never includes the xmlns attribute when calculating the signature.</xs:documentation>
			<xs:documentation>Note: A client can choose to sign a contract on the same broker/provider as its legal identity is defined on, or on the broker/provider hosting the contract, if they are different. In the first case, the request is forwarded to the second provider hosting the contract, and the response is likewise forwarded back to the client. The first broker takes the opportunity to record the signature as well, in case the request is successful. In the second case, the first broker hosting the legal identity of a successful signature is simply informed by the  broker hosting the contract of the signature via the contractSigned notification request.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name='id' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>Identifier of the contract to sign.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='role' type='NonEmptyString' use='required'>
				<xs:annotation>
					<xs:documentation>The role the legal identity assumes when signing the contract.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='transferable' type='xs:boolean' use='optional' default='false'>
				<xs:annotation>
					<xs:documentation>A transferable signature, can be transferred to contracts based on the current contract.</xs:documentation>
					<xs:documentation>This is done however, only if all parameters and attributes remain the same in the new contract.</xs:documentation>
					<xs:documentation>Changing any of the attributes or parameters of the contract will break the signature, and the signature will not be transferred to the new contract.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='s' type='xs:base64Binary' use='required'>
				<xs:annotation>
					<xs:documentation>Digital signature generated by the corresponding asymmetric cipher algorithm.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='contractSigned'>
		<xs:annotation>
			<xs:documentation>This element is sent in a message stanza, if the recipient is a client, or an iq set stanza, if recipient is a broker.</xs:documentation>
			<xs:documentation>Stanza is sent to inform the receiving end that a contract has been signed.</xs:documentation>
			<xs:documentation>It is sent between Trust Providers if the smart contract and the legal identity are hosted on separate brokers.</xs:documentation>
			<xs:documentation>It is also sent to the creator and parts of a contract, if a new signature has been added.</xs:documentation>
			<xs:documentation>Note: To validate the signature, the contract, and possibly some keys, have to be retrieved and validated.</xs:documentation>
			<xs:documentation>The signed contract is included in the message.</xs:documentation>
			<xs:documentation>If a contract uses a template from another broker, this message will be sent to the broker hosting the template as well.</xs:documentation>
			<xs:documentation>If contract reference parameters are available in the contract, the message will also be sent to the brokers hosting the corresponding referenced contracts.</xs:documentation>
			<xs:documentation>If sent in an iq set stanza to another broker, the response may contain an authorizeJid element response, informing the sender of a JID that needs to be authorized to validate the contract.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref='contract'>
					<xs:annotation>
						<xs:documentation>The contract that was signed.</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
			<xs:attribute name='contractId' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>The identity of the contract that has received the signature.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='legalId' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>The legal identity that has signed the contract.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='role' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>The role for which the legal identity has signed the contract.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='signed' type='xs:boolean' use='optional' default='false'>
				<xs:annotation>
					<xs:documentation>If the signature resulted the contract to become signed.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='authorizeJid'>
		<xs:annotation>
			<xs:documentation>When sent in a response to a broker request, contains information about a JID that will perform validation of the content that was sent.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name='jid' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>Bare JID that will be used in validation of content that was sent.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='getSignedContracts'>
		<xs:annotation>
			<xs:documentation>Sent by a client in an iq get to its Trust Provider, to retrieve a list (possibly empty) of contracts signed by the client.</xs:documentation>
			<xs:documentation>Expected response element: contractReferences, if references are to be returned.</xs:documentation>
			<xs:documentation>Expected response element: contracts, if full contracts are to be returned.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name='offset' type='xs:nonNegativeInteger' use='optional'>
				<xs:annotation>
					<xs:documentation>Result will start with the response at this offset into result set.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='maxCount' type='xs:positiveInteger' use='optional'>
				<xs:annotation>
					<xs:documentation>Result will be limited to this number of items.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='references' type='xs:boolean' use='optional' default='true'>
				<xs:annotation>
					<xs:documentation>If only contract references are to be returned.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='contractReferences'>
		<xs:annotation>
			<xs:documentation>Contains a set of contract references.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name='ref' minOccurs='0' maxOccurs='unbounded'>
					<xs:annotation>
						<xs:documentation>A contract reference.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name='id' type='xs:string' use='required'>
							<xs:annotation>
								<xs:documentation>The identifier of a contract.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name='contracts'>
		<xs:annotation>
			<xs:documentation>Contains a set of contracts.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice minOccurs='0' maxOccurs='unbounded'>
				<xs:element ref='contract'>
					<xs:annotation>
						<xs:documentation>A contract.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name='ref'>
					<xs:annotation>
						<xs:documentation>A contract reference.</xs:documentation>
						<xs:documentation>This element is returned if it was not possible for the server to get the corresponding contract.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name='id' type='xs:string' use='required'>
							<xs:annotation>
								<xs:documentation>The identifier of a contract.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
			</xs:choice>
		</xs:complexType>
	</xs:element>

	<xs:element name='getContract'>
		<xs:annotation>
			<xs:documentation>Sent by a client in an iq get to a Trust Provider, to retrieve a specific contract given its ID.</xs:documentation>
			<xs:documentation>The server only returns contracts registered on itself. It also authorizes all request, only returning contracts the client is authorized to see.</xs:documentation>
			<xs:documentation>Note: If a client is part of a contract, its server must also be authorized access to the contract. Otherwise, it cannot determine, if a client has the right to sign a contract or not.</xs:documentation>
			<xs:documentation>Expected response element: contract</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name='id' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>Identifier of the contract to retrieve.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='getContracts'>
		<xs:annotation>
			<xs:documentation>Sent by a client in an iq get to a Trust Provider, to retrieve a set of contracts given by their IDs.</xs:documentation>
			<xs:documentation>The server only returns contracts registered on itself. It also authorizes all request, only returning contracts the client is authorized to see.</xs:documentation>
			<xs:documentation>Note: If a client is part of a contract, its server must also be authorized access to the contract. Otherwise, it cannot determine, if a client has the right to sign a contract or not.</xs:documentation>
			<xs:documentation>Expected response element: contracts</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name='ref' minOccurs='0' maxOccurs='unbounded'>
					<xs:annotation>
						<xs:documentation>A contract reference.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name='id' type='xs:string' use='required'>
							<xs:annotation>
								<xs:documentation>The identifier of a contract.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name='isPart'>
		<xs:annotation>
			<xs:documentation>Is sent by a Trust Provider to another Trust Provider in an iq get stanza, to check if a bare JID (on the receiving Trust Provider) is related to one or more of a set of legal identities.</xs:documentation>
			<xs:documentation>If the sender is not a Trust Provider itself, the request must be rejected.</xs:documentation>
			<xs:documentation>Expected response element: part</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name='idRef' minOccurs='1' maxOccurs='unbounded'>
					<xs:complexType>
						<xs:attribute name='id' type='NonEmptyString' use='required'>
							<xs:annotation>
								<xs:documentation>Legal identity reference.</xs:documentation>
								<xs:documentation>Must reside on the destination Trust Provider.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
			<xs:attribute name='bareJid' type='NonEmptyString' use='required'>
				<xs:annotation>
					<xs:documentation>Bare JID to check if it is related to one or more of the provided set of legal identity references.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='part' type='xs:boolean'>
		<xs:annotation>
			<xs:documentation>Response to the isPart query.</xs:documentation>
		</xs:annotation>
	</xs:element>

	<xs:element name='obsoleteContract'>
		<xs:annotation>
			<xs:documentation>Sent by a client in an iq set to a Trust Provider, to obsolete one of its contracts.</xs:documentation>
			<xs:documentation>Expected response element: contract</xs:documentation>
			<xs:documentation>Note: A contract that is legally binding cannot be obsoleted, unless done so by a part, having a role where canRevoke is true.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name='id' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>Identifier of the contract to obsolete.</xs:documentation>
					<xs:documentation>Note: Obsoleting a proposed contract that has not been approved, automatically turns it to Rejected.</xs:documentation>
					<xs:documentation>Note: Trying to obsolete a rejected or legally binding contract (without revoke permissions) returns a forbidden error.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='deleteContract'>
		<xs:annotation>
			<xs:documentation>Sent by a client in an iq set to a Trust Provider, to delete one of its contracts.</xs:documentation>
			<xs:documentation>Expected response element: contract</xs:documentation>
			<xs:documentation>Note: A contract that is legally binding cannot be deleted before its required archive duration has expired.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name='id' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>Identifier of the contract to delete.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='contractCreated'>
		<xs:annotation>
			<xs:documentation>This element is sent in message stanza, to inform the receiving end that a contract has been created.</xs:documentation>
			<xs:documentation>It is sent to the creator and parts of a contract.</xs:documentation>
			<xs:documentation>Note: Only the contract identity is sent, not the contract itself. It is up to each recipient if they are interested in retrieving the contract or not.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name='contractId' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>The identity of the contract that has been created.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='contractUpdated'>
		<xs:annotation>
			<xs:documentation>This element is sent in message stanza, to inform the receiving end that a contract has been updated or changed.</xs:documentation>
			<xs:documentation>It is sent to the creator and parts of a contract.</xs:documentation>
			<xs:documentation>Note: Only the contract identity is sent, not the contract itself. It is up to each recipient if they are interested in retrieving the latest version of the contract or not.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name='contractId' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>The identity of the contract that has been updated.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='contractDeleted'>
		<xs:annotation>
			<xs:documentation>This element is sent in message stanza, to inform the receiving end that a contract has been deleted.</xs:documentation>
			<xs:documentation>It is sent to the creator and parts of a contract.</xs:documentation>
			<xs:documentation>Note: Only the contract identity is sent, not the contract itself.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name='contractId' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>The identity of the contract that has been deleted.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='updateContract'>
		<xs:annotation>
			<xs:documentation>Sent in an iq set stanza, to update a smart contract in the account of the sender.</xs:documentation>
			<xs:documentation>Expected response element: contract</xs:documentation>
			<xs:documentation>Note: Only contracts that are Proposed, Rejected, Approved (but without signatures) and Obsoleted (but without signatures) can be updated.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref='contract'>
					<xs:annotation>
						<xs:documentation>The contract the legal identity of the client wants to update.</xs:documentation>
						<xs:documentation>Note: The contract will be put in a Proposed state after the update.</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name='getSchemas'>
		<xs:annotation>
			<xs:documentation>Sent in an iq get stanza to the Trust Provider, to get a list of XML schemas available on the broker.</xs:documentation>
			<xs:documentation>Expected response element: schemas</xs:documentation>
		</xs:annotation>
		<xs:complexType/>
	</xs:element>

	<xs:element name='schemas'>
		<xs:annotation>
			<xs:documentation>Contains an array of schema references.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref='schemaRef' minOccurs='0' maxOccurs='unbounded'/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name='schemaRef'>
		<xs:annotation>
			<xs:documentation>Contains a schema reference.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref='digest' minOccurs='1' maxOccurs='unbounded'>
					<xs:annotation>
						<xs:documentation>An array of Hash Digests representing the different versions of the schema available.</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
			<xs:attribute name='namespace' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>XML Schema namespace.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='digest'>
		<xs:annotation>
			<xs:documentation>Represents a hash digest of something.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:simpleContent>
				<xs:extension base='xs:base64Binary'>
					<xs:annotation>
						<xs:documentation>Digest is BASE-64 encoded.</xs:documentation>
					</xs:annotation>
					<xs:attribute name='function' type='HashFunction' use='required'>
						<xs:annotation>
							<xs:documentation>Hash function used when calculating the digest.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:extension>
			</xs:simpleContent>
		</xs:complexType>
	</xs:element>

	<xs:element name='getSchema'>
		<xs:annotation>
			<xs:documentation>Sent in an iq get stanza to the Trust Provider, to get a specific XML schema.</xs:documentation>
			<xs:documentation>Expected response element: schema</xs:documentation>
			<xs:documentation>Note: If a specific digest is not provided, the most recent version of the schema will be returned.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref='digest' minOccurs='0' maxOccurs='1'>
					<xs:annotation>
						<xs:documentation>Digest references a specific version of the XML schema to be retrieved.</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
			<xs:attribute name='namespace' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>The namespace of the schema to retrieve.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='schema' type='xs:base64Binary'>
		<xs:annotation>
			<xs:documentation>Contains the text representation of a specific schema.</xs:documentation>
			<xs:documentation>Note: Even though the XML Schema is itself XML, it is returned as base-64 encoded binary BLOB, to avoid accidental processing, and to maintain digest integrity.</xs:documentation>
		</xs:annotation>
	</xs:element>

	<xs:element name='getLegalIdentities'>
		<xs:annotation>
			<xs:documentation>
				<xs:documentation>Sent in an iq get stanza to the Trust Provider to retrieve any legal identities associated with the signatures of the contract.</xs:documentation>
				<xs:documentation>If the request is sent to the Trust Provider on which the contract is hosted, all legal identities are returned, if authorized.</xs:documentation>
				<xs:documentation>If the request is sent to a different Trust Provider, only legal identities on that Trust Provider, associated with the contract are returned, if the sender is the same as the domain of the referenced contract.</xs:documentation>
				<xs:documentation>Expected response element: id:identities</xs:documentation>
				<xs:documentation>Note: Only clients authorized to view the contract itself, are allowed to view its associated legal identities.</xs:documentation>
				<xs:documentation>Note: Request is authorized only if (1) the client has access to smart contract, or (2) sender is the same domain hosting the referenced contract.</xs:documentation>
				<xs:documentation>Both current and historic cannot both be false. Both can be true.</xs:documentation>
			</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name='contractId' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>The identity of the contract whose legal identities are requested.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='current' type='xs:boolean' use='optional' default='false'>
				<xs:annotation>
					<xs:documentation>By default, the legal identities returned correspond to the timestamp of their signatures. This allows the cryptographic signatures to be validated.</xs:documentation>
					<xs:documentation>If the current legal identities of the corresponding signatures is desired, this attribute should be set to true. If keys have been updated, they cannot be used for validating the corresponding cryptographic signature in the contract.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='historic' type='xs:boolean' use='optional' default='true'>
				<xs:annotation>
					<xs:documentation>By default, the legal identities returned correspond to the timestamp of their signatures. This allows the cryptographic signatures to be validated.</xs:documentation>
					<xs:documentation>If this identity is not desired, this attribute should be set to false.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='getNetworkIdentities'>
		<xs:annotation>
			<xs:documentation>
				<xs:documentation>Sent in an iq get stanza to the Trust Provider to retrieve any network identities associated with the legal identities that have signed the contract.</xs:documentation>
				<xs:documentation>If the request is sent to the Trust Provider on which the contract is hosted, all network identities are returned, if authorized.</xs:documentation>
				<xs:documentation>If the request is sent to a different Trust Provider, only network identities on that Trust Provider, associated with the contract are returned, if the sender is the same as the domain of the referenced contract.</xs:documentation>
				<xs:documentation>Expected response element: networkIdentities</xs:documentation>
				<xs:documentation>Note: Only clients authorized to view the contract itself, are allowed to view its associated network identities.</xs:documentation>
				<xs:documentation>Note: Request is authorized only if (1) the client has access to smart contract, or (2) sender is the same domain hosting the referenced contract.</xs:documentation>
			</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name='contractId' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>The identity of the contract whose network identities are requested.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='networkIdentities'>
		<xs:annotation>
			<xs:documentation>Contains a sequence of network identities, and what legal identities they are related to.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence minOccurs='0' maxOccurs='unbounded'>
				<xs:element name='networkIdentity'>
					<xs:complexType>
						<xs:attribute name='bareJid' type='xs:string' use='required'>
							<xs:annotation>
								<xs:documentation>A network identity, in the form of a bare JID.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name='legalId' type='xs:string' use='required'>
							<xs:annotation>
								<xs:documentation>Corresponding legal identity.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name='searchPublicContracts'>
		<xs:annotation>
			<xs:documentation>Sent in an iq get stansa to a Trust Provider to perform a search for public contracts.</xs:documentation>
			<xs:documentation>Expected response element: searchResult</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name='localName' minOccurs='0' maxOccurs='1'>
					<xs:annotation>
						<xs:documentation>Places restrictions on the local name of the contents of public contracts.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:choice>
							<xs:element name='eq' type='xs:string'>
								<xs:annotation>
									<xs:documentation>Return public contracts in which the local name of the contents is equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='like' type='xs:string'>
								<xs:annotation>
									<xs:documentation>Return public contracts in which the local name of the contents matches this regular expression.</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element name='namespace' minOccurs='0' maxOccurs='1'>
					<xs:annotation>
						<xs:documentation>Places restrictions on the namespace of the contents of public contracts.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:choice>
							<xs:element name='eq' type='xs:string'>
								<xs:annotation>
									<xs:documentation>Return public contracts in which the namespace of the contents is equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='like' type='xs:string'>
								<xs:annotation>
									<xs:documentation>Return public contracts in which the namespace of the contents matches this regular expression.</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element name='template' minOccurs='0' maxOccurs='1'>
					<xs:annotation>
						<xs:documentation>Places restrictions on the identity of the template used to create the contract.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:choice>
							<xs:element name='eq' type='xs:string'>
								<xs:annotation>
									<xs:documentation>Return public contracts based on a template that is equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='like' type='xs:string'>
								<xs:annotation>
									<xs:documentation>Return public contracts based on a template that matches this regular expression.</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element name='role' minOccurs='0' maxOccurs='unbounded'>
					<xs:annotation>
						<xs:documentation>Places restrictions on the roles used in public contracts.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:choice>
							<xs:element name='eq' type='xs:string'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a role equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='like' type='xs:string'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a role matching this regular expression.</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element name='parameter' minOccurs='0' maxOccurs='unbounded'>
					<xs:annotation>
						<xs:documentation>Places restrictions on parameters used in public contracts.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:choice minOccurs='1' maxOccurs='unbounded'>
							<xs:element name='eqStr' type='xs:string'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named string-valued parameter equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='neqStr' type='xs:string'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named string-valued parameter not equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='gtStr' type='xs:string'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named string-valued parameter greater than this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='gteStr' type='xs:string'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named string-valued parameter greater than or equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='ltStr' type='xs:string'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named string-valued parameter lesser than this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='lteStr' type='xs:string'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named string-valued parameter lesser than or equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='like' type='xs:string'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named string-valued parameter that matches this regular expression.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='eqNum' type='xs:decimal'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named numerical parameter equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='neqNum' type='xs:decimal'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named numerical parameter not equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='gtNum' type='xs:decimal'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named numerical parameter greater than this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='gteNum' type='xs:decimal'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named numerical parameter greater than or equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='ltNum' type='xs:decimal'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named numerical parameter lesser than this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='lteNum' type='xs:decimal'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named numerical parameter lesser than or equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='eqB' type='xs:boolean'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named boolean parameter equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='neqB' type='xs:boolean'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named boolean parameter not equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='eqD' type='xs:date'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named date parameter equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='neqD' type='xs:date'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named date parameter not equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='gtD' type='xs:date'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named date parameter greater than this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='gteD' type='xs:date'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named date parameter greater than or equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='ltD' type='xs:date'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named date parameter lesser than this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='lteD' type='xs:date'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named date parameter lesser than or equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='eqDT' type='xs:dateTime'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named date and time parameter equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='neqDT' type='xs:dateTime'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named date and time parameter not equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='gtDT' type='xs:dateTime'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named date and time parameter greater than this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='gteDT' type='xs:dateTime'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named date and time parameter greater than or equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='ltDT' type='xs:dateTime'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named date and time parameter lesser than this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='lteDT' type='xs:dateTime'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named date and time parameter lesser than or equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='eqT' type='xs:time'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named time parameter equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='neqT' type='xs:time'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named time parameter not equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='gtT' type='xs:time'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named time parameter greater than this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='gteT' type='xs:time'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named time parameter greater than or equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='ltT' type='xs:time'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named time parameter lesser than this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='lteT' type='xs:time'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named time parameter lesser than or equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='eqDr' type='xs:duration'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named duration parameter equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='neqDr' type='xs:duration'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named duration parameter not equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='gtDr' type='xs:duration'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named duration parameter greater than this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='gteDr' type='xs:duration'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named duration parameter greater than or equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='ltDr' type='xs:duration'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named duration parameter lesser than this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name='lteDr' type='xs:duration'>
								<xs:annotation>
									<xs:documentation>Return public contracts defining a named duration parameter lesser than or equal to this value.</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:choice>
						<xs:attribute name='name' type='xs:string' use='required'>
							<xs:annotation>
								<xs:documentation>Name of the parameter being queried.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element name='created' type='DateTimeSearchParameter' minOccurs='0' maxOccurs='1'>
					<xs:annotation>
						<xs:documentation>Places restrictions on when public contracts were created.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name='updated' type='DateTimeSearchParameter' minOccurs='0' maxOccurs='1'>
					<xs:annotation>
						<xs:documentation>Places restrictions on when public contracts were last updated.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name='from' type='DateTimeSearchParameter' minOccurs='0' maxOccurs='1'>
					<xs:annotation>
						<xs:documentation>Places restrictions on when public contracts became legally binding.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name='to' type='DateTimeSearchParameter' minOccurs='0' maxOccurs='1'>
					<xs:annotation>
						<xs:documentation>Places restrictions on when public contracts cease to be legally binding.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name='duration' type='DurationSearchParameter' minOccurs='0' maxOccurs='1'>
					<xs:annotation>
						<xs:documentation>Places restrictions on the duration of public contracts.</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
			<xs:attribute name='offset' type='xs:nonNegativeInteger' use='optional'>
				<xs:annotation>
					<xs:documentation>Result will start with the response at this offset into result set.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='maxCount' type='xs:positiveInteger' use='optional'>
				<xs:annotation>
					<xs:documentation>Result will be limited to this number of items.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='searchResult'>
		<xs:annotation>
			<xs:documentation>Contains the response to a search of smart contracts.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name='ref' minOccurs='0' maxOccurs='unbounded'>
					<xs:annotation>
						<xs:documentation>A contract reference.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name='id' type='xs:string' use='required'>
							<xs:annotation>
								<xs:documentation>The identifier of a contract.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
			<xs:attribute name='more' type='xs:boolean' use='optional' default='false'>
				<xs:annotation>
					<xs:documentation>If more contracts are available, matching the search parameters.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:complexType name='DateTimeSearchParameter'>
		<xs:choice minOccurs='1' maxOccurs='unbounded'>
			<xs:element name='eq' type='xs:dateTime'>
				<xs:annotation>
					<xs:documentation>Return public contracts defining a named date and time-valued parameter equal to this value.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='neq' type='xs:dateTime'>
				<xs:annotation>
					<xs:documentation>Return public contracts defining a named date and time-valued parameter not equal to this value.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='gt' type='xs:dateTime'>
				<xs:annotation>
					<xs:documentation>Return public contracts defining a named date and time-valued parameter greater than this value.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='gte' type='xs:dateTime'>
				<xs:annotation>
					<xs:documentation>Return public contracts defining a named date and time-valued parameter greater than or equal to this value.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='lt' type='xs:dateTime'>
				<xs:annotation>
					<xs:documentation>Return public contracts defining a named date and time-valued parameter lesser than this value.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='lte' type='xs:dateTime'>
				<xs:annotation>
					<xs:documentation>Return public contracts defining a named date and time-valued parameter lesser than or equal to this value.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:complexType>

	<xs:complexType name='DurationSearchParameter'>
		<xs:choice minOccurs='1' maxOccurs='unbounded'>
			<xs:element name='eq' type='xs:duration'>
				<xs:annotation>
					<xs:documentation>Return public contracts defining a named duration-valued parameter equal to this value.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='neq' type='xs:duration'>
				<xs:annotation>
					<xs:documentation>Return public contracts defining a named duration-valued parameter not equal to this value.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='gt' type='xs:duration'>
				<xs:annotation>
					<xs:documentation>Return public contracts defining a named duration-valued parameter greater than this value.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='gte' type='xs:duration'>
				<xs:annotation>
					<xs:documentation>Return public contracts defining a named duration-valued parameter greater than or equal to this value.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='lt' type='xs:duration'>
				<xs:annotation>
					<xs:documentation>Return public contracts defining a named duration-valued parameter lesser than this value.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name='lte' type='xs:duration'>
				<xs:annotation>
					<xs:documentation>Return public contracts defining a named duration-valued parameter lesser than or equal to this value.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:complexType>

	<xs:element name='petitionContract'>
		<xs:annotation>
			<xs:documentation>Sent by a client in an iq set to a Trust Provider to petition for the information related to a smart contract managed by the Trust Provider.</xs:documentation>
			<xs:documentation>The request must be signed using an approved and valid legal identity of the caller. Invalid requests must be rejected.</xs:documentation>
			<xs:documentation>The Trust Provider will forward the petition to the clients of the corresponding parts of the contract using a normal message containing a petitionContractMsg element.</xs:documentation>
			<xs:documentation>Expect an empty response on success.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base='PetitionRequest'>
					<xs:sequence>
						<xs:any minOccurs='0' maxOccurs='1' namespace='##other'>
							<xs:annotation>
								<xs:documentation>Optional element that can provide machine-readable context for petition.</xs:documentation>
							</xs:annotation>
						</xs:any>
					</xs:sequence>
					<xs:attribute name='id' type='xs:string' use='required'>
						<xs:annotation>
							<xs:documentation>Identifier of the smart contract hosted by the Trust Provider, to which the caller requests access.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>

	<xs:complexType name='Petition' abstract='true'>
		<xs:sequence>
			<xs:element name='properties' minOccurs='0' maxOccurs='1'>
				<xs:annotation>
					<xs:documentation>Optional element specifying what properties will be forwarded to party making the request.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name='property' type='xs:string' minOccurs='0' maxOccurs='unbounded'>
							<xs:annotation>
								<xs:documentation>Name of one property that will be forwarded.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name='attachments' minOccurs='0' maxOccurs='1'>
				<xs:annotation>
					<xs:documentation>Optional element specifying what attachments will be forwarded to party making the request.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name='attachment' type='xs:string' minOccurs='0' maxOccurs='unbounded'>
							<xs:annotation>
								<xs:documentation>Name of one attachment that will be forwarded, without file extension.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
		<xs:attribute name='pid' type='xs:string' use='required'>
			<xs:annotation>
				<xs:documentation>A petition ID. This identity will follow the petition.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name='purpose' type='xs:string' use='required'>
			<xs:annotation>
				<xs:documentation>A string containing the purpose of the request. This string can be shown to the recipients of the request.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name='PetitionRequest' abstract='true'>
		<xs:complexContent>
			<xs:extension base='Petition'>
				<xs:attribute name='nonce' type='xs:string' use='required'>
					<xs:annotation>
						<xs:documentation>A nonce value, generated by a cryptographic pseudo random number generator.</xs:documentation>
						<xs:documentation>Used to introduce sufficient entropy in the request.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name='s' type='xs:base64Binary' use='required'>
					<xs:annotation>
						<xs:documentation>Digital signature of the request using the legal identity (or one of the approved legal identities) of the caller.</xs:documentation>
						<xs:documentation>The signature is calculated on the following data: UTF8Encode(pid + ":" + id + ":" + purpose + ":" + nonce + ":" + fromBareJid), where fromBareJid is the Bare JID of the sender.</xs:documentation>
						<xs:documentation>Note: If a sender has multiple approved legal identities associated with it, the Trust Provider uses the signature to identify which identity has been used to form the signature. It is this identity that is later forwarded to the owner of the requested identity.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name='PetitionMessage' abstract='true'>
		<xs:complexContent>
			<xs:extension base='Petition'>
				<xs:sequence>
					<xs:element ref='id:identity' minOccurs='1' maxOccurs='1'>
						<xs:annotation>
							<xs:documentation>The legal identity of the entity making the petition.</xs:documentation>
							<xs:documentation>This information can be used by the recipient of the message to make an informed decision on wether to accept, deny or ignore the request.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:any minOccurs='0' maxOccurs='1' namespace='##other'>
						<xs:annotation>
							<xs:documentation>Optional element that can provide machine-readable context for petition.</xs:documentation>
						</xs:annotation>
					</xs:any>
				</xs:sequence>
				<xs:attribute name='from' type='xs:string' use='required'>
					<xs:annotation>
						<xs:documentation>The Bare JID of the entity requesting the information.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name='petitionContractMsg' type='PetitionMessage'>
		<xs:annotation>
			<xs:documentation>Sent in a normal message stanza from a Trust Provider to a client, when the Trust Provider has received a petition for a smart contract to which the recipient of this message is part.</xs:documentation>
			<xs:documentation>The recipient can choose to ignore the message, and respond in its own time, sending an petitionContractResponse element with the response in an IQ set stanza back to the Trust Provider.</xs:documentation>
		</xs:annotation>
	</xs:element>

	<xs:element name='petitionContractResponse'>
		<xs:annotation>
			<xs:documentation>Sent by a client in an iq set to a Trust Provider as an active response to a previous petition for information related to a smart contract to which the client is part.</xs:documentation>
			<xs:documentation>Expect an empty response on success.</xs:documentation>
			<xs:documentation>A successfull request will forward the response, and the referenced smart contract if approved, to the entity making the request, by sending a petitionContractResponseMsg element in a normal message stanza.</xs:documentation>
			<xs:documentation>Note: Only one of the parts need to consent to sharing the contract this time. The rationale is to mimick how we treat contracts in the physical world. Each part has a copy of the contract, and can choose to show this copy to others, for their purposes. The other parts cannot deny this. But at least one of the parts must consent to the petition for the entity making the petition to get access to the corresponding contract.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:any minOccurs='0' maxOccurs='1' namespace='##other'>
					<xs:annotation>
						<xs:documentation>Optional element that can provide machine-readable context for petition response.</xs:documentation>
					</xs:annotation>
				</xs:any>
			</xs:sequence>
			<xs:attribute name='id' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>Identifier of the smart contract referred to by the petition.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='pid' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>A petition ID. This identity will follow the petition.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='jid' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>Bare JID of the entity making the petition.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='response' type='xs:boolean' use='optional' default='false'>
				<xs:annotation>
					<xs:documentation>If the Trust Provider can share the smart contract information with the entity making the petition.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='petitionContractResponseMsg'>
		<xs:annotation>
			<xs:documentation>Sent in a normal message stanza from a Trust Provider to a client, when the Trust Provider has received a response on a petition made by the client for a smart contract.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref='contract' minOccurs='0' maxOccurs='1'>
					<xs:annotation>
						<xs:documentation>The legal identity requested, if available, and the owner of the identity consented in sharing the information.</xs:documentation>
						<xs:documentation>This information must only be used for the purposes described in the original petition.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:any minOccurs='0' maxOccurs='1' namespace='##other'>
					<xs:annotation>
						<xs:documentation>Optional element that can provide machine-readable context for petition response.</xs:documentation>
					</xs:annotation>
				</xs:any>
			</xs:sequence>
			<xs:attribute name='pid' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>A petition ID. This identity will follow the petition.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='response' type='xs:boolean' use='required'>
				<xs:annotation>
					<xs:documentation>If the Trust Provider can share the smart contract information with the entity making the petition.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='addAttachment'>
		<xs:annotation>
			<xs:documentation>Sent in an iq set stanza from a client to a Trust Provider, to add an attachment to a smart contract that is yet to be signed.</xs:documentation>
			<xs:documentation>After first signature, contract must not accept new attachments.</xs:documentation>
			<xs:documentation>Attachments can be photos, documents, or other types of objects that have a well-defined Internet Content Type.</xs:documentation>
			<xs:documentation>The contents of the attachment may have been uploaded to the Trust Provider using HTTP File Upload (XEP-0363) before this command is sent.</xs:documentation>
			<xs:documentation>Only the creator of the contract can add attachments to it.</xs:documentation>
			<xs:documentation>After the file has been registered as an attachment, it must be removed, after first giving time for lost messages and retries, from the temporary storage of the HTTP File Upload service by the Trust Provider, for privacy reasons.</xs:documentation>
			<xs:documentation>Access privileges to legal identities or smart contracts, automatically infer access privileges to any attachments associated with them.</xs:documentation>
			<xs:documentation>Expected response element: contract</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name='contractId' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>Smart Contract to which the attachment is to be assigned.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='getUrl' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>The URL of the content. It may previously have been uploaded using HTTP File Upload (XEP-0363).</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='s' type='xs:base64Binary' use='required'>
				<xs:annotation>
					<xs:documentation>Signature of the content assigned to the smart contract.</xs:documentation>
					<xs:documentation>The signature must be made by an approved legal identity of the sender.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='removeAttachment'>
		<xs:annotation>
			<xs:documentation>Sent in an iq set stanza from a client to a Trust Provider, to remove an attachment from a smart contract that is proposed or is approved, but before it is being signed.</xs:documentation>
			<xs:documentation>A client can only remove attachments from its own contracts.</xs:documentation>
			<xs:documentation>Expected response element: contract</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name='attachmentId' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>Identity of attachment to remove.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='attachment'>
		<xs:annotation>
			<xs:documentation>Represents an attachment.</xs:documentation>
			<xs:documentation>An attachment can	be assigned to smart contracts.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name='id' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>The identity of the attachment.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='legalId' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>The legal identity of the uploader of the attachment.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='contentType' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>Internet Content-Type of attachment.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='fileName' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>Filename of attachment.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='s' type='xs:base64Binary' use='required'>
				<xs:annotation>
					<xs:documentation>Signature of attachment, made by the uploader.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='timestamp' type='xs:dateTime' use='required'>
				<xs:annotation>
					<xs:documentation>Timestamp of attachment upload.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='attachmentRef'>
		<xs:annotation>
			<xs:documentation>Includes information on how to download an attachment.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name='attachmentId' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>The ID of the attachment referenced to.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='url' type='xs:anyURI' use='required'>
				<xs:annotation>
					<xs:documentation>An URL to download the attachment.</xs:documentation>
					<xs:documentation>Attachments must be protected using the Neuro.Foundation.Sign WWW-authentication mechanism to make sure only authorized clients can access the attachment.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='contractProposal'>
		<xs:annotation>
			<xs:documentation>Defines a contract proposal for a proposed part.</xs:documentation>
			<xs:documentation>Can be sent in a normal message stanza directly to the indended recipient.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name='sharedSecret' minOccurs='0' maxOccurs='1'>
					<xs:annotation>
						<xs:documentation>
							<xs:annotation>
								<xs:documentation>Shared secrets are used to encrypt and decrypt confidential parameters in the contract.</xs:documentation>
								<xs:documentation>If using confidential parameters, make sure to send proposals using End-to-End Encrypted messages.</xs:documentation>
								<xs:documentation>The recipient of a contract proposal will assume the sender bare JID represents the bare JID of the creator.</xs:documentation>
								<xs:documentation>This fact is used when decrypting encrypted parameters in the contract.</xs:documentation>
								<xs:documentation>If a third party forwards a contract proposal containing encrypted parameters, the recipient will not be able to decrypt the parameter values.</xs:documentation>
								<xs:documentation>Only the creator of a contract can send contract proposals if the contract contains encrypted parameters.</xs:documentation>
							</xs:annotation>
						</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name='key' type='xs:base64Binary' use='required'>
							<xs:annotation>
								<xs:documentation>Key used for encryption and decryption.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name='algorithm' use='required'>
							<xs:annotation>
								<xs:documentation>Algorithm used for encryption and decryption.</xs:documentation>
								<xs:documentation>The same symmetric ciphers as are available for End-to-End encryption (E2EE) can be used.</xs:documentation>
								<xs:documentation>Algorithms requiring an IV, use the same IV algorithms as for E2EE, replacing id with parameter name, type with XML local name of parameter type, from with Bare JID of creator, to with the base64-encoded contract nonce and counter with the zero-based parameter index.</xs:documentation>
								<xs:documentation>Algorithms requiring associated data, calculate it as the UTF-8 encoding of the parameter name.</xs:documentation>
							</xs:annotation>
							<xs:simpleType>
								<xs:restriction base='xs:string'>
									<xs:enumeration value='aes'>
										<xs:annotation>
											<xs:documentation>AES-256 encryption of string representation of parameter value, UTF-8 encoded, using Cipher Block Chaining (CBC) and PKCS#7 padding.</xs:documentation>
											<xs:documentation>Parameter must not be accepted if the decryption fails.</xs:documentation>
											<xs:documentation>Initiation Vector (IV) is the first 16 bytes of the SHA-256 hash of the concatenation of the Contract ID and the Parameter Name.</xs:documentation>
										</xs:annotation>
									</xs:enumeration>
									<xs:enumeration value='cha'>
										<xs:annotation>
											<xs:documentation>ChaCha20 encryption of string representation of parameter value, UTF-8 encoded, starting with block counter 1.</xs:documentation>
											<xs:documentation>Parameter must not be accepted if the decryption fails.</xs:documentation>
											<xs:documentation>Initiation Vector (IV) is the first 8 bytes of the SHA-256 hash of the concatenation of the Contract ID and the Parameter Name.</xs:documentation>
										</xs:annotation>
									</xs:enumeration>
									<xs:enumeration value='acp'>
										<xs:annotation>
											<xs:documentation>AEAD-ChaCha20-Poly1305 authenticated encryption with associated data of string representation of parameter value, UTF-8 encoded.</xs:documentation>
											<xs:documentation>Parameter must not be accepted if the decryption fails.</xs:documentation>
											<xs:documentation>Initiation Vector (IV) is the first 8 bytes of the SHA-256 hash of the concatenation of the Contract ID and the Parameter Name.</xs:documentation>
											<xs:documentation>The Associated Data (AD) used in the AEAD algorithm is the UTF-8 encoding of the concatenation of the Contract ID and the Parameter Name.</xs:documentation>
										</xs:annotation>
									</xs:enumeration>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
			<xs:attribute name='contractId' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>The ID of the proposed contract.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='role' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>The proposed role of the recipient in the proposed contract.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='message' type='xs:string' use='optional'>
				<xs:annotation>
					<xs:documentation>An optional message to present to the recipient.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name='failContract'>
		<xs:annotation>
			<xs:documentation>Can be sent in a message from one broker to another, to indicate the failure of a contract hosted by the recipient.</xs:documentation>
			<xs:documentation>Only brokers hosting the template of the contract referred to, a contract reference pointed to by the contract, or hosting a signatory of the contract, is allowed to send this message.</xs:documentation>
			<xs:documentation>The message must be ignored if received from another party.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name='contractId' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>The identity of the contract that has failed.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name='reason' type='xs:string' use='required'>
				<xs:annotation>
					<xs:documentation>The reason for failing the contract.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

</xs:schema>